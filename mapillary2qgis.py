# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Mapillary2QGIS
                                 A QGIS plugin
 Mapillary2QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-14
        copyright            : (C) 2025 by Quang Huy NGUYEN
        email                : quanghuy.nguyen@mail.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Quang Huy NGUYEN'
__date__ = '2025-08-14'
__copyright__ = '(C) 2025 by Quang Huy NGUYEN'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.PyQt.QtCore import (QCoreApplication,QVariant)
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingException,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterDateTime,
                       QgsProcessingParameterFeatureSink,
                       QgsField,
                       QgsVectorLayer,
                       QgsWkbTypes,
                       QgsProject,
                       QgsProcessingParameterExtent,
                       QgsFeature,
                       QgsGeometry,
                       QgsPointXY,
                       QgsFields,
                       QgsProcessingParameterString,
                       QgsProcessingParameterNumber)
from qgis import processing

import urllib.request, json 
import pandas as pd
from pyproj import Transformer
import urllib.request


class Mapillary2QGISAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    START_DATE = 'START_DATE'
    END_DATE = 'END_DATE'
    OUTPUT = 'OUTPUT'
    EXTENT='EXTENT'
    USER='USER'
    API='API'
    LIMIT='LIMIT'

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Mapillary2QGISAlgorithm()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'mapillary2qgis'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Mapillary2QGIS')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Mapillary Downloader')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'mapillary2qgis'

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("This piece of python code will download Mapillary data in QGIS canvas as a Point Vector layer.")

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterDateTime(
                self.START_DATE,
                self.tr('Start date'),
                type = QgsProcessingParameterDateTime.DateTime,
                defaultValue = 'Any'
                #[QgsProcessing.SourceType.TypeVectorAnyGeometry]
            )
        )
        
        self.addParameter(
            QgsProcessingParameterDateTime(
                self.END_DATE,
                self.tr('End date'),
                type = QgsProcessingParameterDateTime.DateTime,
                defaultValue = 'Any'
                #[QgsProcessing.SourceType.TypeVectorAnyGeometry]
            )
        )
        
        self.addParameter(
            QgsProcessingParameterString(
                self.API,
                self.tr('Mapillary Access Token, get it at https://www.mapillary.com/dashboard/developers'),
                optional=False,
                defaultValue = ''
                #[QgsProcessing.SourceType.TypeVectorAnyGeometry]
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.LIMIT,
                self.tr('Limitation of downloaded images'),
                type=QgsProcessingParameterNumber.Integer,
                optional=False,
                defaultValue = 10
                #[QgsProcessing.SourceType.TypeVectorAnyGeometry]
            )
        )
        
        self.addParameter(
            QgsProcessingParameterExtent(
                self.EXTENT,
                self.tr('Extent'),
                defaultValue = 'Any'
                #[QgsProcessing.SourceType.TypeVectorAnyGeometry]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )



    def processAlgorithm(self, parameters, context, feedback):
        feedback.pushInfo("Let's start !")
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.

        start_date_source = self.parameterAsDateTime(
            parameters,
            self.START_DATE,
            context
        )
        
        end_date_source = self.parameterAsDateTime(
            parameters,
            self.END_DATE,
            context
        )
        
        extent= self.parameterAsExtent(
            parameters,
            self.EXTENT,
            context
        )
        
        api=self.parameterAsString(
            parameters,
            self.API,
            context
        )
        
        limit=self.parameterAsInt(
            parameters,
            self.LIMIT,
            context
        )

        # If source was not found, throw an exception to indicate that the algorithm
        # encountered a fatal error. The exception text can be any string, but in this
        # case we use the pre-built invalidSourceError method to return a standard
        # helper text for when a source cannot be evaluated
        if start_date_source is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.START_DATE))
            
        if api is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.START_DATE))
        
        if end_date_source is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.END_DATE))
            
        #check canvas
        original_extent=[[extent.xMinimum(),extent.yMinimum()],[extent.xMaximum(),extent.yMaximum()]]
        project_espg=str(QgsProject.instance().crs().authid())
        if (project_espg!='EPSG:4326'):
            destination_espg='EPSG:4326'
            transformer = Transformer.from_crs(project_espg, destination_espg)
            
            transform_extent=[]
            for coord in original_extent:
                coord=transformer.transform(coord[0],coord[1])
                transform_extent=transform_extent+[i for i in coord]
            #feedback.pushInfo(transform_extent)
        else:
            transform_extent=original_extent
        
        
        uri = "point?crs=epsg:4326"
        
        temp = QgsVectorLayer(uri,"Mapillary","memory")
        temp_data = temp.dataProvider()
        
        columns=['id','id_mapillary','angle','captured_at','thumb_256','url']
        type=[QVariant.Double,QVariant.Double,QVariant.Double,QVariant.String,QVariant.String,QVariant.String]

        sink_fields=QgsFields()
        
        for i in range(len(type)) : 
            myField = QgsField(columns[i] ,type[i])
            sink_fields.append(myField)
        # Update     

        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            sink_fields,
            QgsWkbTypes.Point,
            temp.sourceCrs()
        )
        

        
        
        if sink is None:
            raise QgsProcessingException(self.invalidSinkError(parameters, self.OUTPUT))
        
                #Download data
        #download from Mapillary
        
        limit_number=10
        start_date="2025-01-11T00:00:00Z"
        end_date="2025-12-31T23:59:59Z"
        user="Null" #NULL
        pano="false"

        extent=str(transform_extent[1])+","+str(transform_extent[0])+","+str(transform_extent[3])+","+str(transform_extent[2])
        if(user!="Null"):
            extent+=user
        
        #print("https://graph.mapillary.com/images?access_token="+api+"&fields=id&bbox="+extent+"&limit="+str(limit)+"&start_captured_at="+start_date_source.toString("yyyy-MM-ddThh:mm:ssZ")+"&end_captured_at="+end_date_source.toString("yyyy-MM-ddThh:mm:ssZ")+"&is_pano="+str(pano))
        with urllib.request.urlopen("https://graph.mapillary.com/images?access_token="+api+"&fields=id&bbox="+extent+"&limit="+str(limit)+"&start_captured_at="+start_date_source.toString("yyyy-MM-ddThh:mm:ssZ")+"&end_captured_at="+end_date_source.toString("yyyy-MM-ddThh:mm:ssZ")+"&is_pano="+str(pano)) as url:
            data = json.load(url)['data']

        collection=[]

        #feedback.pushInfo(len(data))
        progress=0

        for i in data:
            feedback.pushInfo(str(int(progress/len(data)*100))+"%")
            progress=progress+1
            with urllib.request.urlopen("https://graph.mapillary.com/"+i['id']+"?access_token="+api+"&fields=id,computed_geometry,compass_angle,captured_at,thumb_256_url,thumb_original_url") as url:
                input = json.load(url)
                photo={}
                try:
                    photo['id']=input['id']
                    photo['angle']=input['compass_angle']
                    photo['captured_at']=input['captured_at']
                    photo['thumb_256_url']=input['thumb_256_url']
                    photo['thumb_original_url']=input['thumb_original_url']
                    photo['x']=input['computed_geometry']['coordinates'][0]
                    photo['y']=input['computed_geometry']['coordinates'][1]
                    collection+=[photo]
                except:
                    feedback.pushInfo('missing data for '+i['id'])

        df=pd.DataFrame(collection)
        
        for row in df.itertuples():
            #print(row)
            f = QgsFeature()
            f.setAttributes([row[i] for i in range(0,6)])
            f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(row[6], row[7])))
            sink.addFeature(f)
        
        
        return {self.OUTPUT: dest_id}
